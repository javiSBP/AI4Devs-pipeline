name: Backend CI/CD Pipeline

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/pipeline.yml'

jobs:
  test-backend:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test-backend
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Build backend
        run: npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: |
            backend/dist
            backend/package.json
            backend/package-lock.json

  deploy-backend:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact
          path: backend-artifact
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "backend-artifact/*"
          target: ${{ secrets.TARGET_DIR }}
      - name: List files in target dir
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ls -l ${{ secrets.TARGET_DIR }}
            ls -l ${{ secrets.TARGET_DIR }}/backend-artifact
            ls -l ${{ secrets.TARGET_DIR }}/backend-artifact/dist
      - name: Restart backend service on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export PATH=$PATH:/usr/local/bin:/usr/bin:/bin
            if ! command -v npm &> /dev/null; then
              if [ -f /etc/debian_version ]; then
                # Debian/Ubuntu
                curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                sudo apt-get install -y nodejs
              elif [ -f /etc/redhat-release ] || [ -f /etc/system-release ]; then
                # Amazon Linux/RedHat/CentOS
                curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
                sudo yum install -y nodejs
              fi
            fi
            sudo npm install -g pm2
            cd ${{ secrets.TARGET_DIR }}/backend-artifact
            npm install --production
            pm2 restart all || pm2 start dist/index.js --name backend
      - name: Install and Configure Nginx for HTTP
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [ -f /etc/debian_version ]; then
              # Debian/Ubuntu
              sudo apt-get update
              sudo apt-get install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            elif [ -f /etc/redhat-release ] || [ -f /etc/system-release ]; then
              # Amazon Linux/RedHat/CentOS
              sudo yum update -y
              sudo yum install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            else
              echo "Unsupported OS. Please install Nginx manually."
              exit 1
            fi
            
            # Create Nginx configuration for HTTP
            cat << 'EOF' | sudo tee /etc/nginx/conf.d/backend.conf
            server {
              listen 80;
              server_name ${{ secrets.HOST_DNS }};
              
              location / {
                proxy_pass http://localhost:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
              }
            }
            EOF
            
            # Remove default config if needed
            if [ -f /etc/nginx/sites-enabled/default ]; then
              sudo rm /etc/nginx/sites-enabled/default
            fi
            
            # Test and reload Nginx configuration
            sudo nginx -t && sudo systemctl reload nginx
      - name: Output Public URL
        run: echo "Your backend is accessible at http://${{ secrets.HOST_DNS }}"