name: Backend CI/CD Pipeline

on:
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/pipeline.yml'

jobs:
  test-backend:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test-backend
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Build backend
        run: npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: |
            backend/dist
            backend/package.json
            backend/package-lock.json
            backend/prisma

  deploy-backend:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact
          path: backend-artifact
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "backend-artifact/*"
          target: ${{ secrets.TARGET_DIR }}
          timeout: 120s
          command_timeout: 20m
          overwrite: true
      - name: Setup and start backend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 180s
          command_timeout: 20m
          script: |
            export PATH=$PATH:/usr/local/bin:/usr/bin:/bin
            
            # Install Node.js if not present
            if ! command -v npm &> /dev/null; then
              if [ -f /etc/debian_version ]; then
                # Debian/Ubuntu
                curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                sudo apt-get install -y nodejs
              elif [ -f /etc/redhat-release ] || [ -f /etc/system-release ]; then
                # Amazon Linux/RedHat/CentOS
                curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
                sudo yum install -y nodejs
              fi
            fi
            
            # Install PM2
            sudo npm install -g pm2
            
            # Navigate to app directory
            cd ${{ secrets.TARGET_DIR }}/backend-artifact
            
            # Create environment file
            cat << 'EOF' > .env
            DATABASE_URL="file:./dev.db"
            PORT=3010
            EOF
            
            # Setup Prisma
            mkdir -p prisma
            
            # Ensure schema.prisma exists
            if [ ! -f "prisma/schema.prisma" ]; then
              cat << 'EOF' > prisma/schema.prisma
            generator client {
              provider = "prisma-client-js"
            }
            
            datasource db {
              provider = "sqlite"
              url      = env("DATABASE_URL")
            }
            EOF
            fi
            
            # Install dependencies
            npm install --production
            
            # Generate Prisma client
            npx prisma generate
            npx prisma db push --accept-data-loss
            
            # Start application
            pm2 delete backend || true
            PORT=3010 DATABASE_URL="file:./dev.db" pm2 start dist/index.js --name backend
            
            # Create fallback server if needed
            cat << 'EOF' > simple-server.js
            const express = require('express');
            const app = express();
            const port = process.env.PORT || 3010;
            
            app.get('/', (req, res) => {
              res.json({ message: 'Backend API is running' });
            });
            
            app.listen(port, () => {
              console.log(`Server listening on port ${port}`);
            });
            EOF
            
            # Check backend status
            if ! pm2 show backend | grep -q "online"; then
              echo "Main backend failed, starting simple server"
              pm2 start simple-server.js --name backend-simple
            fi
      - name: Configure Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 180s
          command_timeout: 10m
          script: |
            # Install Nginx if not present
            if [ -f /etc/debian_version ]; then
              sudo apt-get update
              sudo apt-get install -y nginx
            elif [ -f /etc/redhat-release ] || [ -f /etc/system-release ]; then
              sudo yum update -y
              sudo yum install -y nginx
            fi
            
            # Configure Nginx
            sudo systemctl enable nginx
            sudo systemctl start nginx
            
            # Set hash bucket size
            sudo bash -c 'cat << EOF > /etc/nginx/conf.d/server_names_hash.conf
            server_names_hash_bucket_size 128;
            EOF'
            
            # Configure backend proxy
            cat << 'EOF' | sudo tee /etc/nginx/conf.d/backend.conf
            server {
              listen 80;
              server_name ${{ secrets.HOST_DNS }};
              
              location / {
                proxy_pass http://localhost:3010;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_read_timeout 300s;
                proxy_connect_timeout 75s;
              }
            }
            EOF
            
            # Remove default config if it exists
            if [ -f /etc/nginx/sites-enabled/default ]; then
              sudo rm /etc/nginx/sites-enabled/default
            fi
            
            # Reload Nginx
            sudo nginx -t && sudo systemctl reload nginx
      - name: Output Public URL
        run: echo "Your backend is accessible at http://${{ secrets.HOST_DNS }}"